"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const utils_1 = require("../utils");
const regexp_ast_analysis_1 = require("regexp-ast-analysis");
const mention_1 = require("../utils/mention");
exports.default = utils_1.createRule("prefer-d", {
    meta: {
        docs: {
            description: "enforce using `\\d`",
            category: "Stylistic Issues",
            recommended: true,
        },
        fixable: "code",
        schema: [],
        messages: {
            unexpected: "Unexpected {{type}} {{expr}}. Use '{{instead}}' instead.",
        },
        type: "suggestion",
    },
    create(context) {
        function createVisitor({ node, flags, getRegexpLocation, fixReplaceNode, toCharSet, }) {
            let reportedCharacterClass = false;
            return {
                onCharacterClassEnter(ccNode) {
                    const charSet = toCharSet(ccNode);
                    let predefined = undefined;
                    if (charSet.equals(regexp_ast_analysis_1.Chars.digit(flags))) {
                        predefined = "\\d";
                    }
                    else if (charSet.equals(regexp_ast_analysis_1.Chars.digit(flags).negate())) {
                        predefined = "\\D";
                    }
                    if (predefined) {
                        reportedCharacterClass = true;
                        context.report({
                            node,
                            loc: getRegexpLocation(ccNode),
                            messageId: "unexpected",
                            data: {
                                type: "character class",
                                expr: mention_1.mention(ccNode),
                                instead: predefined,
                            },
                            fix: fixReplaceNode(ccNode, predefined),
                        });
                    }
                },
                onCharacterClassLeave() {
                    reportedCharacterClass = false;
                },
                onCharacterClassRangeEnter(ccrNode) {
                    if (reportedCharacterClass) {
                        return;
                    }
                    if (ccrNode.min.value === utils_1.CP_DIGIT_ZERO &&
                        ccrNode.max.value === utils_1.CP_DIGIT_NINE) {
                        const instead = "\\d";
                        context.report({
                            node,
                            loc: getRegexpLocation(ccrNode),
                            messageId: "unexpected",
                            data: {
                                type: "character class range",
                                expr: mention_1.mention(ccrNode),
                                instead,
                            },
                            fix: fixReplaceNode(ccrNode, instead),
                        });
                    }
                },
            };
        }
        return utils_1.defineRegexpVisitor(context, {
            createVisitor,
        });
    },
});
